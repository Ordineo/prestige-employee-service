DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS (
  ID INT NOT NULL IDENTITY PRIMARY KEY,
  GRANTED_PRESTIGES INT,
  RECEIVED_PRESTIGES INT,
  USERNAME VARCHAR(40) NOT NULL,
  PASSWORD VARCHAR(40) NOT NULL,
  EMAIL VARCHAR(50),
  FIRSTNAME VARCHAR(60),
  LASTNAME VARCHAR(60),
  AVATAR VARCHAR(300)
);

DROP TABLE IF EXISTS ROLES;
CREATE TABLE ROLES (
  ID INT NOT NULL IDENTITY PRIMARY KEY,
  TITLE VARCHAR(100) NOT NULL
);

DROP TABLE IF EXISTS CATEGORIES;
CREATE TABLE CATEGORIES (
  ID INT NOT NULL IDENTITY PRIMARY KEY,
  NAME VARCHAR(60) NOT NULL,
);

DROP TABLE IF EXISTS ROLE_ASSIGNMENTS;
CREATE TABLE ROLE_ASSIGNMENTS (
  ID INT NOT NULL IDENTITY PRIMARY KEY,
  USER_ID INT NOT NULL,
  ROLE_ID INT NOT NULL,
  CONSTRAINT FK_ROLE_ASSIGNMENTS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
  CONSTRAINT FK_ROLE_ASSIGNMENTS_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID)
);

DROP TABLE IF EXISTS PRESTIGES;
CREATE TABLE PRESTIGES (
  ID INT NOT NULL IDENTITY PRIMARY KEY,
  GRANTOR_ID INT NOT NULL,
  RECEIVER_ID INT NOT NULL,
  SCORE INT NOT NULL,
  REASON VARCHAR(500),
  URL VARCHAR(300),
  CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT FK_PRESTIGES_GRANTORS FOREIGN KEY (GRANTOR_ID) REFERENCES USERS(ID),
  CONSTRAINT FK_PRESTIGES_RECEIVERS FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(ID)
);

DROP TABLE IF EXISTS PRESTIGE_LIKES;
CREATE TABLE PRESTIGE_LIKES (
  ID INT NOT NULL IDENTITY PRIMARY KEY,
  USER_ID INT NOT NULL,
  PRESTIGE_ID INT NOT NULL,
  REASON VARCHAR(500),
  CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT FK_PRESTIGE_LIKES_USERS FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
  CONSTRAINT FK_PRESTIGE_LIKES_PRESTIGES FOREIGN KEY (USER_ID) REFERENCES PRESTIGES(ID)
);

DROP TABLE IF EXISTS CATEGORY_ASSIGNMENTS;
CREATE TABLE CATEGORY_ASSIGNMENTS (
  ID INT NOT NULL IDENTITY PRIMARY KEY,
  PRESTIGE_ID INT NOT NULL,
  CATEGORY_ID INT NOT NULL,
  CONSTRAINT FK_CATEGORY_ASSIGNMENTS_PRESTIGES FOREIGN KEY (PRESTIGE_ID) REFERENCES PRESTIGES(ID),
  CONSTRAINT FK_CATEGORY_ASSIGNMENTS_CATEGORIES FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(ID)
);